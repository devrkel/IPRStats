#!/usr/bin/python
import sys, os, shutil, getopt
import ConfigParser
from ipsstatsdata import IPSStatsData

# Used to construct the html dom tree
class _html_el:

    def __init__(self, el, attr, children):
        # HTML tag (string)
        self.el = el
        
        # Condition should specify "Pretty HTML"
        if True:
            self.tab = "\t"
            self.nl = "\n"
        else:
            self.tab = ''
            self.nl = ''
        
        # HTML tag's attributes
        self.attr = attr
        
        # Standardize children input; accepts strings (text),
        # _html_el objects, or arrays of _html_el objects
        if type(children) == type(''):   self.children = [children]
        elif type(children) == type(0):  self.children = [str(children)]
        elif type(children) == type([]): self.children = children * 1
        else:                            self.children = [children]
    
    # Append an attribute to the HTML element
    def append_attr(self, attr, value):
        self.attr[attr] = value
    
    # Append a child to the HTML element
    # Accepts ('el',{attr},[child]) or _html_el object
    def append_child(self, elem, attr={}, children=[]):
        if elem:   
            # Check if the passed arg is an object or new element
            if type(elem) == type(''): child = _html_el(elem, attr, children)
            else: child = elem

            self.children.append(child)
            return child
        return None

    # Return the HTML for this object and its children
    def get_html(self, ilvl=0):
        indent = self.tab * ilvl
        html = indent + "<" + self.el
        if self.attr == None: self.attr = {}
        for (key, value) in self.attr.items():
            if value:
                html += " " + key + "=\"" + value.replace('"', '&quot;') + "\""
        if len(self.children) == 0 or not(self.children[0]): html += " />"
        elif len(self.children) == 1:
            html += ">"
            child = self.children[0]
            if type(child) == type(''):
                html += str(child)
            else:
                html += child.get_html(0)
            html += "</" + self.el + ">"
        else:
            html += ">" + self.nl
            for child in self.children:
                if type(child) == type(''):
                    html += indent + self.tab + child + self.nl
                else:
                    html += child.get_html(ilvl + 1) + self.nl
            html += indent + "</" + self.el + ">"
        return html

class export_html:
    
    def __init__(self, session, config):
        self.session = session
        self.ipsstats = IPSStatsData(session, config)
        self.apps = ['PFAM', 'PIR', 'GENE3D', 'HAMAP', 'PANTHER', 'PRINTS',
            'PRODOM','PROFILE', 'PROSITE', 'SMART', 'SUPERFAMILY', 'TIGRFAMs']
        
        self.path = os.path.join(config.get('html','directory'), self.session)
    
    # Generates a generic list of links that can be styled with CSS
    def _generate_menu(self, menu_links, current_page=None, menu_id=None):
        
        menu = _html_el('ul',{'class':'menu', 'id':menu_id},[])
        for name, url in menu_links:
            item = menu.append_child('li', {}, self._generate_link(name, url))
            if name == current_page:
                item.append_attr('class','selected')
        return menu
    
    # Saves a pie chart given [(label1, label2),(value1, value2)] to chart_filename
    # Returns an img object to the filename if creation was successful
    def _generate_chart(self, chart_data, chart_title, chart_filename):
        
        if self.ipsstats.get_chart(chart_data, chart_title, chart_filename):
            img = _html_el('img', {}, [])
            img.append_attr('src', os.path.basename(chart_filename))
            img.append_attr('alt', chart_title)
            return img
        else:
            return None
    
    # Generates a generic link object with link_name and link_url
    def _generate_link(self, link_name, link_url, target=None, link_title=None):
        
        link = _html_el('a', {}, link_name)
        link.append_attr('href', link_url)
        if target != None: link.append_attr('target', target)
        if link_title != None: link.append_attr('title', link_title)
        return link
    
    # Generates a table object with matches data generated by IPSStatsData
    def _generate_link_table(self, app):
        
        table = _html_el('table', {'cellspacing':'0'}, [])
        
        # Create header row
        tr = table.append_child('tr', {'class':'highlight'}, [])
        tr.append_child('th', {}, 'Name')
        tr.append_child('th', {}, 'Count')
        tr.append_child('th', {}, 'Link')
        
        current_name = ''
        self.ipsstats.init_match_data(app)
        while True:
            row = self.ipsstats.get_link_data_row()
            if row:
                
                # Create title row for database
                if row[0] != current_name:
                    current_name = row[0]
                    tt = table.append_child('tr',{},[])
                    tt.append_child('td',{},row[0])
                    tt.append_child('td',{},str(row[2]))
                    url = self._generate_link(row[0],row[1],'_blank')
                    tt.append_child('td',{},url)
                
                # Create GO link rows
                tg = table.append_child('tr',{},[])
                tg.append_child('td',{},' ')
                if len(row) == 6:
                    link = self._generate_link(row[3], row[4], '_blank', row[5])
                else:
                    link = self._generate_link(row[3], row[4], '_blank')
                tg.append_child('td',{'colspan':'2'},link)
            else:
                break
        return table
    
    # Generates an entire page complete with menus, charts, and tables
    # TODO: write incrementally so that an entire page is not in memory
    def generate_page(self, app, directory=None, menu=True):
        # Standard header for each page
        page = _html_el('html',{'xmlns':'http://www.w3.org/1999/xhtml'},[])
        head = page.append_child('head',{},[])
        head.append_child('meta',{'http-equiv':'Content-Type','content':'text/html; charset=utf-8'}, None)
        head.append_child('title',{},'IPS Stats XML File Upload')
        head.append_child('link',{'href':'style.css','rel':'stylesheet','type':'text/css'},None)
        body = page.append_child('body',{},[])
        container = body.append_child('div',{'id':'container'},[])
        header = container.append_child('div',{'id':'header'},[])
        header.append_child('h1',{},'IPS Stats')
        header.append_child(self._generate_menu([('Home','#'),('upload','index.php')], menu_id='tabs'))
        middle = container.append_child('div',{'id':'middlesec'}, [])
        
        # Generate navigation
        if menu:
            links = []
            for db in self.apps:
                links.append((db, db.lower() + '.html'))
            middle.append_child(self._generate_menu(links, app, 'navigation'))
        else:
            middle.append_child('ul',{'id':'navigation'},' ')
        
        # Generate chart
        content = middle.append_child('div', {'id':'content'}, [])
        counts = self.ipsstats.get_counts(app)
        if directory: chart_filename = os.path.join(directory, app.lower()+'_matches.png')
        else: chart_filename = app.lower()+'_matches.png'
        chart = self._generate_chart(counts, app+' Matches', chart_filename)
        if chart: content.append_child(chart)
        
        # Generate table
        content.append_child(self._generate_link_table(app))
        
        # Standard footer for each page
        container.append_child('div',{'id':'footer'},
            'Meta IPS was developed through Miami University\'s Undergraduate Summers Scholars program.')
        
        if directory:
            file_handle = open(os.path.join(directory, app.lower()+'.html'),'w')
        else:
            file_handle = sys.stdout
            
        print >> file_handle, page.get_html()
        file_handle.close
    
    def export(self, app=None, directory=None):
        
        if directory:
            shutil.copyfile('style.css', os.path.join(directory,'style.css'))
        
        if app:
            eh.generate_page(app, directory, False)
        else:
            for app in self.apps:
                self.generate_page(app, directory)

if __name__ == '__main__':

    usage = "Usage: export_html.py -c <config_file> -s <session_id> [-a <db_application> -o <output_directory>]"
    app = None
    session = None
    config_file = None
    exp_dir = None
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],"h:a:c:s:o:",["help","app=","config=","session=","output="])
    except getopt.GetoptError:
        print usage
        sys.exit(2)

    for o, a in opts:
        if o in ("-h", "--help"):
            print usage
            sys.exit(1)
        elif o in ("-a", "--app"):
            app = a
        elif o in ("-c", "--config"):
            config_file = a
        elif o in ("-s", "--session"):
            session = a
        elif o in ("-o", "--output"):
            exp_dir = a
        else:
            pass

    if config_file and session:
        config = ConfigParser.ConfigParser()
        config.readfp(open(config_file))
    else:
        print "You must supply a configuration file and a session id.\n" + usage
        sys.exit(2)
    
    eh = export_html(session, config)
    eh.export(app, exp_dir)
    #'''